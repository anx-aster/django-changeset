================
Django ChangeSet
================

.. image:: https://travis-ci.org/beachmachine/django-changeset.svg?branch=master
    :target: https://travis-ci.org/beachmachine/django-changeset

Django ChangeSet is a simple Django app that will give your models the possibility to track all changes. It depends on
``django_userforeignkey`` to determine the users doing the changes. 

Currently, Django 1.8 (Python 2.7, Python 3.3+), Django 1.9 (Python 2.7, Python 3.4+), Django 1.10 (Python 2.7, Python 3.5+) and Django 1.11 are supported.

Detailed documentation is in the docs subdirectory (see :file:`./docs/index.rst`).

Quick start
-----------

1. Use ``pip`` to install and download django-changeset (this will automatically resolve the dependency on ``django-userforeignkey``):

.. code-block:: bash

    pip install django-userforeignkey


2. Add ``django_userforeignkey`` and ``django_changeset`` to your ``INSTALLED_APPS`` setting like this:

.. code-block:: python

    INSTALLED_APPS = [
        ...
        'django_userforeignkey',
        'django_changeset',
    ]


3. Add ``django_userforeignkey.middleware.UserForeignKeyMiddleware`` to your ``MIDDLEWARE_CLASSES`` (or in case of Django 1.10+ ``MIDDLEWARE``) settings like this:

.. code-block:: python

    MIDDLEWARE_CLASSES = (
        ...
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        ...
        'django_userforeignkey.middleware.UserForeignKeyMiddleware',
    )



**Note**: Make sure to insert the ``UserForeignKeyMiddleware`` **after** Djangos ``AuthenticationMiddleware``.


Example usage
-------------

Use ``RevisionModelMixin`` as a mixin class for your models and add the fields you want to track in the meta configuration:

.. code-block:: python

    import uuid

    from django.db import models
    from django_changeset.models import RevisionModelMixin

    class MyModel(models.Model, RevisionModelMixin):
        class Meta:
            track_by = 'my_pk'
            track_fields = ('my_data', )
            track_related = ('my_ref', )

        my_pk = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4)
        my_data = models.CharField(max_length=64, verbose_name="Very important data you want to track")
        my_ref = models.ForeignKey('SomeOtherModel', verbose_name="Very important relation", related_name='my_models')


Adding ChangeSets as a Generic Relation to your Model
-----------------------------------------------------

To make use of all features (e.g., accessing ``created_by``) of Django ChangeSet, it is necessary add a
 ``GenericRelation`` to the ChangeSet table like this (tested with Django 1.11 - ToDo test with others):

.. code-block:: python

    class MyModel(models.Model, RevisionModelMixin):
        ...

        changesets = GenericRelation(
            ChangeSet,
            content_type_field='object_type',
            object_id_field='object_uuid'
        )


This enables you to use Django ORM query lookup Syntax on changesets (e.g., on the changeset type INSERT):

.. code-block:: python

    # select all my models that were created by user "johndoe"
    MyModel.objects.filter(changesets__changeset_type='I', changesets__user__username='johndoe')



Generic Relations with UUID
---------------------------

The query from above does not work in Postgres when using the built-in ``UUID`` datatype, e.g.:

.. code-block:: python

    class MyModel(models.Model, RevisionModelMixin):
        my_pk = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4)

        ...

        changesets = GenericRelation(
            ChangeSet,
            content_type_field='object_type',
            object_id_field='object_uuid'
        )


This is due to the fact that the ``ChangeSet`` model uses a ``CharField(max_length=...)`` for the ``object_uuid``.
It is possible to change this behaviour by using ``DJANGO_CHANGESET_PK_TYPE = "UUID"`` in your Django settings file.
This will convert swap out the basic ``object_uuid`` field from:

.. code-block:: python

    object_uuid = models.CharField(
        verbose_name=_(u"Object UUID"),
        max_length=255,
        editable=False,
    )

to this:

.. code-block:: python

    object_uuid = models.UUIDField(
        verbose_name=_(u"Object UUID"),
        editable=False,
    )


This obviously **requires** a migration! However, do **not** run the ``makemigrations`` command to do this (it would create a migration
 in the site-packages folder where you installed django-changeset). Instead, add a migration file manually to **your application** 
 (e.g., ``your_app``), which will look something like this:

.. code-block:: python

    # -*- coding: utf-8 -*-
    # Generated by Django 1.11.2 on 2017-06-30 08:22
    from __future__ import unicode_literals

    from django.db import migrations, models


    class Migration(migrations.Migration):
        dependencies = [
            ('django_changeset', '0002_add_index_changesettype'),
            ('your_app', '0815_your_last_migration')
        ]

        replaces = ((TARGET_APP, __module__.rsplit('.', 1)[-1]),)

        operations = [
            migrations.AlterField(
                model_name='changeset',
                name='object_uuid',
                field=models.UUIDField(editable=False, verbose_name='Object UUID'),
            ),
        ]

        def __init__(self, name, app_label):
            super(Migration, self).__init__(name, 'django_changeset')


Performance Improvement when querying ChangeSets: Select Related User and User Profile
--------------------------------------------------------------------------------------

Whenever you query/filter on the ChangeSets, you will most likely want to include information about the user. Therefore we modified the default
behaviour of the ChangeSet QuerySet Manager to automatically join the ChangeSet table via the user foreign key. 

.. code-block:: python

    class ChangeSetManager(models.Manager):
    """
    ChangeSet Manager that forces all ChangeSet queries to contain at least the "user" foreign relation
    """
    def get_queryset(self):
        return super(ChangeSetManager, self).get_queryset().select_related(
            "user"
        )


This can furthermore be configured with the setting ``DJANGO_CHANGESET_SELECT_RELATED``, e.g. if you not only want to join this with information 
 from the user table, but also information from the userprofile table:

.. code-block:: python

    DJANGO_CHANGESET_SELECT_RELATED=["user", "user__userprofile"]


If you want to disable this feature, just set ``DJANGO_CHANGESET_SELECT_RELATED=[]``.


Automatically Aggregate Changesets and Changerecords
----------------------------------------------------

Django Changeset can automatically aggregate changests and changerecords, if they are created by the same user within
a given timedelta. This is very useful if you are doing partial updates of your model (e.g., PATCH requests in a REST
API).

You can configure this by setting ``aggregate_changesets_within_seconds`` in the models meta class, e.g.:

.. code-block:: python

    class MyModel(models.Model, RevisionModelMixin):
        class Meta:
            aggregate_changesets_within_seconds = 60  # aggregate changesets created by the same user within 60 seconds

        my_pk = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4)

        ...

        changesets = GenericRelation(
            ChangeSet,
            content_type_field='object_type',
            object_id_field='object_uuid'
        )


Soft Delete and Restore Functionality
-------------------------------------

Django Changeset supports soft-deleting aswell as restoring an object. Those actions will
be marked with changeset type ``R`` (``ChangeSet.RESTORE_TYPE``) for restore, and ``S`` (``ChangeSet.SOFT_DELETE_TYPE``) for soft delete.


You can enable tracking soft deletes and restores by setting ``track_soft_delete_by`` aswell as ``track_fields`` accordingly in the models meta class, e.g.:

.. code-block:: python

    class MyModel(models.Model, RevisionModelMixin):
        class Meta:
            track_fields = ('....', 'deleted',)  # Make sure to include the `deleted` field in `track_fields`
            track_soft_delete_by = 'deleted'

        my_pk = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4)
        
        deleted = models.BooleanField(default=False, verbose_name="Whether this object is soft deleted or not")

        ...

        changesets = GenericRelation(
            ChangeSet,
            content_type_field='object_type',
            object_id_field='object_uuid'
        )


Access ChangeSets and ChangeRecords
-----------------------------------

ToDo

You can access the changeset by calling the ``change_set`` property of an instance of ``MyModel`` as shown in the
following example:

.. code-block:: python

    print("------- CHANGE SETS (", len(somemodel.change_sets), ")---------")
    for change_set in somemodel.change_sets:
        # print change_set
        print("Change was carried out at ", change_set.date, " by user ", change_set.user, " on model ", change_set.object_type)

        print("  + CHANGE RECORDS (", len(change_set.change_records.all()), "): ")
        for change_record in change_set.change_records.all():
            print("\t", change_record)
            print("\tIs change on a related field?", change_record.is_related)
            # related fields: we only know that something new has been added. we know the PK, but not the object itself
            print("\t\tChanged field ", change_record.field_name, "(", change_record.field_verbose_name, ") from ",
                  change_record.old_value, "(display:", change_record.old_value_display, ") to")
            print("\t\t ", change_record.new_value, "(display:", change_record.new_value_display, ")")
            if change_record.is_related:
                print("\t\tRelated Object Info: ", change_record.related_object)
        # TODO:
        # change_set.created_at, change_set.created_by, change_set.last_modified_by, change_set.last_modified_at

        print("-----")


Known problems
--------------

Do **not** use any of the following names in your models: ``created_at``, ``created_by``, ``changesets``,
``last_modified_by``, ``last_modified_at``, ``changed_data``


Maintainers
-----------
This repository is currently maintained by

- beachmachine
- ChristianKreuzberger

Pull Requests are welcome.

License
-------

Django ChangeSet uses the BSD-3 Clause License, see LICENSE file.


Changelog / Release History
---------------------------

Work in progress - No official release yet
